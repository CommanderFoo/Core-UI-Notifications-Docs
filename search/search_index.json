{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI Notifications Documentation Welcome to the documentation for UI Notifications found in Core Community Content. This system allows you to display UI notifications to the player to get their attention. It handles all the heavy lifting of placing notifications at various positions on the screen, handles tweening them in and out, and comes with a queuing system for all areas of the screen so no notifications get lost or overlapped. All notifications are easy to customise, and making your own templates can also be used with this system. There are various properties that are available for you to override to make the notifications fit for your specific game. The API is straight forward and doesn't rely on requiring, or accessing the global table. It makes use of broadcasting that you may already be familiar with if you know about the Core Events API.","title":"Home"},{"location":"#ui-notifications-documentation","text":"Welcome to the documentation for UI Notifications found in Core Community Content. This system allows you to display UI notifications to the player to get their attention. It handles all the heavy lifting of placing notifications at various positions on the screen, handles tweening them in and out, and comes with a queuing system for all areas of the screen so no notifications get lost or overlapped. All notifications are easy to customise, and making your own templates can also be used with this system. There are various properties that are available for you to override to make the notifications fit for your specific game. The API is straight forward and doesn't rely on requiring, or accessing the global table. It makes use of broadcasting that you may already be familiar with if you know about the Core Events API.","title":"UI Notifications Documentation"},{"location":"credits/","text":"Credits Thanks to deadlyfishes for the button used in the examples.","title":"Credits"},{"location":"credits/#credits","text":"Thanks to deadlyfishes for the button used in the examples.","title":"Credits"},{"location":"custom-template/","text":"Custom Template There is only really one rule to creating a custom notification template, and that is the UIText object that will display the message of the notification must be named Message . This is because the system looks for it dynamically at runtime just to make it a little easier so you don't need to setup a custom property. Here is an example of one of the default templates structure.","title":"Custom Template"},{"location":"custom-template/#custom-template","text":"There is only really one rule to creating a custom notification template, and that is the UIText object that will display the message of the notification must be named Message . This is because the system looks for it dynamically at runtime just to make it a little easier so you don't need to setup a custom property. Here is an example of one of the default templates structure.","title":"Custom Template"},{"location":"easings/","text":"Easings Below is a list of all the support easing types that you can use for notifications. See the below link for a good visual on which easing would best suit your notification. Easings.net Easing Type linear inQuad outQuad inOutQuad outInQuad inCubic outCubic inOutCubic outInCubic inQuart outQuart inOutQuart outInQuart inQuint outQuint inOutQuint outInQuint inSine outSine inOutSine outInSine inExpo outExpo inOutExpo outInExpo inCirc outCirc inOutCirc outInCirc inElastic outElastic inOutElastic outInElastic inBack outBack inOutBack outInBack inBounce outBounce inOutBounce outInBounce 1 2 3 4 5 6 Events . Broadcast ( \"show_notification\" , \"This a notification.\" , { ease_in = \"inBounce\" , ease_out = \"outBounce\" })","title":"Easings"},{"location":"easings/#easings","text":"Below is a list of all the support easing types that you can use for notifications. See the below link for a good visual on which easing would best suit your notification. Easings.net Easing Type linear inQuad outQuad inOutQuad outInQuad inCubic outCubic inOutCubic outInCubic inQuart outQuart inOutQuart outInQuart inQuint outQuint inOutQuint outInQuint inSine outSine inOutSine outInSine inExpo outExpo inOutExpo outInExpo inCirc outCirc inOutCirc outInCirc inElastic outElastic inOutElastic outInElastic inBack outBack inOutBack outInBack inBounce outBounce inOutBounce outInBounce 1 2 3 4 5 6 Events . Broadcast ( \"show_notification\" , \"This a notification.\" , { ease_in = \"inBounce\" , ease_out = \"outBounce\" })","title":"Easings"},{"location":"events/","text":"Events Each notification has 2 support events that you can register a callback too. Event Description on_start Called when the notification start animation is started. on_complete Called when the notification complete animation has finished. There are also a few parameters that may be of use which are passed to the callback for you to access. Parameter Description Parameter 1 This is the item popped from the queue that will contain all the options. Parameter 2 This is the notification object (template instance). Parameter 3 This is the tween instance used for this notification. 1 2 3 4 5 6 7 8 9 10 11 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function ( queue_item , notification , tween ) print ( \"Complete\" ) end })","title":"Events"},{"location":"events/#events","text":"Each notification has 2 support events that you can register a callback too. Event Description on_start Called when the notification start animation is started. on_complete Called when the notification complete animation has finished. There are also a few parameters that may be of use which are passed to the callback for you to access. Parameter Description Parameter 1 This is the item popped from the queue that will contain all the options. Parameter 2 This is the notification object (template instance). Parameter 3 This is the tween instance used for this notification. 1 2 3 4 5 6 7 8 9 10 11 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function ( queue_item , notification , tween ) print ( \"Complete\" ) end })","title":"Events"},{"location":"examples/","text":"Examples There are 7 examples to try out that come with the system. Drag and drop the UI Notifications - Examples template into your hierarchy and enter play mode to test out show examples of how you could use this notification system.","title":"Examples"},{"location":"examples/#examples","text":"There are 7 examples to try out that come with the system. Drag and drop the UI Notifications - Examples template into your hierarchy and enter play mode to test out show examples of how you could use this notification system.","title":"Examples"},{"location":"how-to-use/","text":"How to Use Using the system is really simple. Once you have the UI Notifications template dropped into your hierarchy, all you need to do is broadcast to it to create your notifications. Something to note that is important is the system comes with a queue built in for each screen position. So for example if you call the API multiple times one after the other for the same screen position, then the system will queue up the notifications and display them in order they were received. Here is an example of creating 2 notifications that make use of the queuing system. By default this will be INFO notifications and display TOP LEFT . 1 2 Events . Broadcast ( \"show_notification\" , \"Notification 1.\" ) Events . Broadcast ( \"show_notification\" , \"Notification 2.\" ) Creating notifications is that simple. Broadcast to the event show_notification and as the second parameter send your message. The third parameter is a table with a list of options you can override if needed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { type = \"WARNING\" , position = \"TOP MIDDLE\" , offset = Vector2 . New ( 50 , 100 ), ease_in = \"outElastic\" , ease_out = \"inElastic\" , in_duration = 1 , out_duration = 1 , stay_duration = 2 , on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function () print ( \"Complete\" ) end })","title":"How to Use"},{"location":"how-to-use/#how-to-use","text":"Using the system is really simple. Once you have the UI Notifications template dropped into your hierarchy, all you need to do is broadcast to it to create your notifications. Something to note that is important is the system comes with a queue built in for each screen position. So for example if you call the API multiple times one after the other for the same screen position, then the system will queue up the notifications and display them in order they were received. Here is an example of creating 2 notifications that make use of the queuing system. By default this will be INFO notifications and display TOP LEFT . 1 2 Events . Broadcast ( \"show_notification\" , \"Notification 1.\" ) Events . Broadcast ( \"show_notification\" , \"Notification 2.\" ) Creating notifications is that simple. Broadcast to the event show_notification and as the second parameter send your message. The third parameter is a table with a list of options you can override if needed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { type = \"WARNING\" , position = \"TOP MIDDLE\" , offset = Vector2 . New ( 50 , 100 ), ease_in = \"outElastic\" , ease_out = \"inElastic\" , in_duration = 1 , out_duration = 1 , stay_duration = 2 , on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function () print ( \"Complete\" ) end })","title":"How to Use"},{"location":"properties/","text":"Properties While you can create a notification without adjusting any properties, you may soon come to realise that you may wish to modify the height, width etc of the notification you want to show to the player. Below are all the properties you can set when making a call to the API. Property Name Description type The type of notification. Possible types are INFO , WARNING , SUCCESS , ERROR , GENERAL . position There are 9 screen positions you can use. TOP LEFT , TOP MIDDLE , TOP RIGHT , MIDDLE LEFT , MIDDLE MIDDLE , MIDDLE RIGHT , BOTTOM LEFT , BOTTOM MIDDLE , BOTTOM RIGHT . rotation The rotation of the notification. width The width of the notification. height The height of the notification. offset A Vector2 that use used to set the notification offset. add_width A useful property if you need to add an aditional width to the notification. add_height A useful property if you need to add an aditional height to the notification. template A custom template to use instead of the default ones that come with the system. See the template section for info. ease_in The easing method to use for when the notification is eased in. See easing section. ease_out The easing method to use for when the notification is eased out. See easing section. delay_duration The duration to delay this notification from showing. stay_duration THe duration of how long this notification will stay out for. in_duration The duration of the in animation. out_duration The duration of the out animation. sound The sound to be played when this notification is displayed. on_complete The function to call when the notification is completed (i.e removed). on_start The function to call when the notification is created. dynamic If true, and using a GENERAL type of notification, the system will attempt to dynamically set the height. text_color Changed the color of the text. background_color Change the color of the background, this should be used on the GENERAL type, or custom templates, otherwise icons will look out of place. Below is an example of using some of these properties. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { type = \"WARNING\" , position = \"TOP MIDDLE\" , offset = Vector2 . New ( 50 , 100 ), ease_in = \"outElastic\" , ease_out = \"inElastic\" , in_duration = 1 , out_duration = 1 , stay_duration = 2 , on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function () print ( \"Complete\" ) end })","title":"Properties"},{"location":"properties/#properties","text":"While you can create a notification without adjusting any properties, you may soon come to realise that you may wish to modify the height, width etc of the notification you want to show to the player. Below are all the properties you can set when making a call to the API. Property Name Description type The type of notification. Possible types are INFO , WARNING , SUCCESS , ERROR , GENERAL . position There are 9 screen positions you can use. TOP LEFT , TOP MIDDLE , TOP RIGHT , MIDDLE LEFT , MIDDLE MIDDLE , MIDDLE RIGHT , BOTTOM LEFT , BOTTOM MIDDLE , BOTTOM RIGHT . rotation The rotation of the notification. width The width of the notification. height The height of the notification. offset A Vector2 that use used to set the notification offset. add_width A useful property if you need to add an aditional width to the notification. add_height A useful property if you need to add an aditional height to the notification. template A custom template to use instead of the default ones that come with the system. See the template section for info. ease_in The easing method to use for when the notification is eased in. See easing section. ease_out The easing method to use for when the notification is eased out. See easing section. delay_duration The duration to delay this notification from showing. stay_duration THe duration of how long this notification will stay out for. in_duration The duration of the in animation. out_duration The duration of the out animation. sound The sound to be played when this notification is displayed. on_complete The function to call when the notification is completed (i.e removed). on_start The function to call when the notification is created. dynamic If true, and using a GENERAL type of notification, the system will attempt to dynamically set the height. text_color Changed the color of the text. background_color Change the color of the background, this should be used on the GENERAL type, or custom templates, otherwise icons will look out of place. Below is an example of using some of these properties. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { type = \"WARNING\" , position = \"TOP MIDDLE\" , offset = Vector2 . New ( 50 , 100 ), ease_in = \"outElastic\" , ease_out = \"inElastic\" , in_duration = 1 , out_duration = 1 , stay_duration = 2 , on_start = function ( queue_item , notification , tween ) print ( \"Start\" ) end , on_complete = function () print ( \"Complete\" ) end })","title":"Properties"},{"location":"quick-start/","text":"Quick Start If you want to just get straight into using the system then follow these steps. Drag and drop the template UI Notifications into your hierarchy. Send a broadcast to show_notification containing your message. 1 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" )","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"If you want to just get straight into using the system then follow these steps. Drag and drop the template UI Notifications into your hierarchy. Send a broadcast to show_notification containing your message. 1 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" )","title":"Quick Start"},{"location":"replacements/","text":"Replacements The following list of replacements can be used in notification messages. Type Description {name} This will be replaced by the name of the player. {id} This will be replaced by the ID of the player. {hitpoints} This will be replaced with the current hit points (aka health) of the player. {maxhitpoints} This will be replaced with the max hit points (aka max halth) of the player. {kills} This will be replaced with the total kills the player has got. {deaths} This will be replaced with the total deaths the player has got. {maxjumpcount} This will be replaced with the max jump count the player can do. {resource=RESOURCE} This will be replaced with the resource amount. See the Resource section below for more information. Resources Resource replacement variables support a few additional parameters to handle displaying it to the player so it reads correct. How many games do you see that don't handle the plural of something like \"Coins\". Reading \"You have 12 Coin\" is not a hard problem to solve but is often overlooked. So the resource replacement variable will handle this for you. resource=coins,true,true The 2 parameters after the type and value resource=coin tells the system to include the resource name, and handle the plural for you. 1 2 Events . Broadcast ( \"show_notification\" , \"Hello {name}.\" ) Events . Broadcast ( \"show_notification\" , \"Hello, you have {resource=coins,true,true}.\" )","title":"Replacements"},{"location":"replacements/#replacements","text":"The following list of replacements can be used in notification messages. Type Description {name} This will be replaced by the name of the player. {id} This will be replaced by the ID of the player. {hitpoints} This will be replaced with the current hit points (aka health) of the player. {maxhitpoints} This will be replaced with the max hit points (aka max halth) of the player. {kills} This will be replaced with the total kills the player has got. {deaths} This will be replaced with the total deaths the player has got. {maxjumpcount} This will be replaced with the max jump count the player can do. {resource=RESOURCE} This will be replaced with the resource amount. See the Resource section below for more information.","title":"Replacements"},{"location":"replacements/#resources","text":"Resource replacement variables support a few additional parameters to handle displaying it to the player so it reads correct. How many games do you see that don't handle the plural of something like \"Coins\". Reading \"You have 12 Coin\" is not a hard problem to solve but is often overlooked. So the resource replacement variable will handle this for you. resource=coins,true,true The 2 parameters after the type and value resource=coin tells the system to include the resource name, and handle the plural for you. 1 2 Events . Broadcast ( \"show_notification\" , \"Hello {name}.\" ) Events . Broadcast ( \"show_notification\" , \"Hello, you have {resource=coins,true,true}.\" )","title":"Resources"},{"location":"screen-positions/","text":"Screen Positions The system supports 9 screen positions, and along with setting offsets, you can get notifications to display exactly where you want with ease. Below are all the screen positions that you can use to set the notification. Position TOP LEFT TOP MIDDLE TOP RIGHT MIDDLE LEFT MIDDLE MIDDLE MIDDLE RIGHT BOTTOM LEFT BOTTOM MIDDLE BOTTOM RIGHT Info MIDDLE MIDDLE will fade in and out, while all other notifications will be tweened based on position. 1 2 3 4 5 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { position = \"TOP RIGHT\" })","title":"Screen Positions"},{"location":"screen-positions/#screen-positions","text":"The system supports 9 screen positions, and along with setting offsets, you can get notifications to display exactly where you want with ease. Below are all the screen positions that you can use to set the notification. Position TOP LEFT TOP MIDDLE TOP RIGHT MIDDLE LEFT MIDDLE MIDDLE MIDDLE RIGHT BOTTOM LEFT BOTTOM MIDDLE BOTTOM RIGHT Info MIDDLE MIDDLE will fade in and out, while all other notifications will be tweened based on position. 1 2 3 4 5 Events . Broadcast ( \"show_notification\" , \"This is my notification.\" , { position = \"TOP RIGHT\" })","title":"Screen Positions"},{"location":"settings/","text":"Settings The UI Notifications system has a couple of settings that may be useful to know. In the UI Notifications group in the hierarchy, epand it and highlight the Notifications_API script. You should see a couple of properties. Property Description ui_container This is the parent UI Container where the notifications will become a child of. play_sound This property allows you to turn of the notification sound for the system. default_sound This is the default sound the system uses for the notifications.","title":"Settings"},{"location":"settings/#settings","text":"The UI Notifications system has a couple of settings that may be useful to know. In the UI Notifications group in the hierarchy, epand it and highlight the Notifications_API script. You should see a couple of properties. Property Description ui_container This is the parent UI Container where the notifications will become a child of. play_sound This property allows you to turn of the notification sound for the system. default_sound This is the default sound the system uses for the notifications.","title":"Settings"},{"location":"types/","text":"Types There are 5 types of notifications this system supports. Type Description INFO A notification to display some information to the player. SUCCESS A notification to show that something was successful for the player. WARNING A notification to show a warning to the player (i.e \"Inventory is nearly full.\"). ERROR A notification to show an error to the player. GENERAL This is a special type of notification that can be used for just general things. 1 2 3 4 5 Events . Broadcast ( \"show_notification\" , \"An error has occurred.\" , { type = \"ERROR\" })","title":"Types"},{"location":"types/#types","text":"There are 5 types of notifications this system supports. Type Description INFO A notification to display some information to the player. SUCCESS A notification to show that something was successful for the player. WARNING A notification to show a warning to the player (i.e \"Inventory is nearly full.\"). ERROR A notification to show an error to the player. GENERAL This is a special type of notification that can be used for just general things. 1 2 3 4 5 Events . Broadcast ( \"show_notification\" , \"An error has occurred.\" , { type = \"ERROR\" })","title":"Types"}]}